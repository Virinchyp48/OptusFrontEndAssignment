{"version":3,"sources":["Progress.jsx","ProgressBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Progress","bar","className","style","opacity","width","background","ProgressBar","useState","bars","setbars","buttons","setbuttons","selectedBar","setselectedBar","useEffect","axios","get","then","res","console","log","data","map","barObj","push","i","length","name","value","onChange","e","target","handleChange","button","onClick","val","newBar","allBars","handleBtnClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAEaA,EAAW,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACzB,OACE,qBAAKC,UAAU,WAAf,SACE,qBACEA,UAAU,gBACVC,MAAO,CAAEC,QAAS,EAAGC,MAAM,GAAD,OAAKJ,EAAIA,IAAT,KAAiBK,WAAYL,EAAIK,YAF7D,SAIE,iCAAOL,EAAIA,IAAX,YCLKM,EAAc,WAAO,IAAD,EACPC,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,OAEDF,mBAAS,IAFR,mBAExBG,EAFwB,KAEfC,EAFe,OAGOJ,mBAAS,GAHhB,mBAGxBK,EAHwB,KAGXC,EAHW,KAK/BC,qBAAU,WACRC,IAAMC,IAAI,oCAAoCC,MAAK,SAACC,GAClDC,QAAQC,IAAIF,EAAIG,KAAKb,MACrB,IAAIA,EAAO,GACXU,EAAIG,KAAKb,KAAKc,KAAI,SAACtB,GACjB,IAAIuB,EAAS,CAAEvB,MAAKK,WAAY,aAChCG,EAAKgB,KAAKD,MAEZd,EAAQD,GACRG,EAAWO,EAAIG,KAAKX,cAErB,IAqBH,OACE,sBAAKT,UAAU,YAAf,UACE,oBAAIA,UAAU,cAAd,gCAEA,qBAAKA,UAAU,QACf,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WACf,sBAAKA,UAAU,SAAf,UACGO,EAAKc,KAAI,SAACtB,EAAKyB,GAAN,OACR,qBAAaxB,UAAU,MAAvB,SACE,cAAC,EAAD,CAAUD,IAAKA,KADPyB,MAIZ,qBAAKxB,UAAU,cAAf,SACE,qBAAIA,UAAU,GAAd,UACE,+BACGO,EAAKkB,OAAS,GACb,wBACEC,KAAK,MACLC,MAAOhB,EACPiB,SAAU,SAACC,IAvCR,SAACA,GACpBjB,EAAeiB,EAAEC,OAAOH,OAuCNI,CAAaF,IAJjB,SAOGtB,EAAKc,KAAI,SAACtB,EAAKyB,GAAN,OACR,yBAAgBG,MAAOH,EAAvB,wBACcA,EAAI,IADLA,QAKhB,OAEJf,EAAQY,KAAI,SAACW,EAAQR,GAAT,OACX,6BACE,wBACES,QAAS,YAlDJ,SAACC,GACtB,IAAIC,EAAM,eAAQ5B,EAAKI,IACvBwB,EAAOpC,IAAMoC,EAAOpC,IAAMmC,EACtBC,EAAOpC,KAAO,IAChBoC,EAAO/B,WAAa,OAEhB+B,EAAOpC,KAAO,IAChBoC,EAAOpC,IAAM,GAEfoC,EAAO/B,WAAa,aAEtB,IAAIgC,EAAO,YAAO7B,GAClB6B,EAAQzB,GAAewB,EACvB3B,EAAQ4B,GAsCUC,CAAeL,IAFnB,SAKGA,KANIR,cAajB,qBAAKxB,UAAU,eC5ERsC,MARf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f524517b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport const Progress = ({ bar }) => {\r\n  return (\r\n    <div className=\"progress\">\r\n      <div\r\n        className=\"progress-done\"\r\n        style={{ opacity: 1, width: `${bar.bar}%`, background: bar.background }}\r\n      >\r\n        <span>{bar.bar}%</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Progress } from \"./Progress\";\r\n\r\nexport const ProgressBar = () => {\r\n  const [bars, setbars] = useState([]);\r\n  const [buttons, setbuttons] = useState([]);\r\n  const [selectedBar, setselectedBar] = useState(0);\r\n  // const [background, setbackground] = useState(\"lightblue\");\r\n  useEffect(() => {\r\n    axios.get(\"http://pb-api.herokuapp.com/bars\").then((res) => {\r\n      console.log(res.data.bars);\r\n      let bars = [];\r\n      res.data.bars.map((bar) => {\r\n        let barObj = { bar, background: \"lightblue\" };\r\n        bars.push(barObj);\r\n      });\r\n      setbars(bars);\r\n      setbuttons(res.data.buttons);\r\n    });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setselectedBar(e.target.value);\r\n  };\r\n\r\n  const handleBtnClick = (val) => {\r\n    let newBar = { ...bars[selectedBar] };\r\n    newBar.bar = newBar.bar + val;\r\n    if (newBar.bar >= 100) {\r\n      newBar.background = \"red\";\r\n    } else {\r\n      if (newBar.bar <= 0) {\r\n        newBar.bar = 0;\r\n      }\r\n      newBar.background = \"lightblue\";\r\n    }\r\n    let allBars = [...bars];\r\n    allBars[selectedBar] = newBar;\r\n    setbars(allBars);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"text-center\">Progress Bars Demo</h3>\r\n\r\n      <div className=\"row\"></div>\r\n      <div className=\"row bars\">\r\n        <div className=\"col-sm\"></div>\r\n        <div className=\"col-sm\">\r\n          {bars.map((bar, i) => (\r\n            <div key={i} className=\"col\">\r\n              <Progress bar={bar} />\r\n            </div>\r\n          ))}\r\n          <div className=\"row buttons\">\r\n            <ul className=\"\">\r\n              <li>\r\n                {bars.length > 0 && (\r\n                  <select\r\n                    name=\"bar\"\r\n                    value={selectedBar}\r\n                    onChange={(e) => {\r\n                      handleChange(e);\r\n                    }}\r\n                  >\r\n                    {bars.map((bar, i) => (\r\n                      <option key={i} value={i}>\r\n                        Progress # {i + 1}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                )}{\" \"}\r\n              </li>\r\n              {buttons.map((button, i) => (\r\n                <li key={i}>\r\n                  <button\r\n                    onClick={() => {\r\n                      handleBtnClick(button, i);\r\n                    }}\r\n                  >\r\n                    {button}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { ProgressBar } from \"./ProgressBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProgressBar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}